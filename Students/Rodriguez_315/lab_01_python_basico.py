# -*- coding: utf-8 -*-
"""Lab_01_python_basico.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jipBH4k5fdHM2t5ybFQM1K30faOEFFyj

# Laboratorio 01
### Métodos computacionales para físicos  y astrónomos
### Universidad de Antioquia
### Prof: Hernan D. Salinas Jiménez
"""

# Commented out IPython magic to ensure Python compatibility.
# Ejecutar esta celda antes de cada laboratorio
!git clone https://github.com/hernansalinas/autogrades.git
# %run -i autogrades/example/libs/libUnitTest.py

"""# Operaciones básicas en python.


### Definicion de variables
1. Definir una variable x tipo entero.
2. Definir una variable y tipo float 
3. Definir una variable z tipo string.
"""

x = 0

y = 0.0

z = ''

# Commented out IPython magic to ensure Python compatibility.
# Ejecute la presente celda para probar su solucion 
# %run -i autogrades/example/libs/Lab_autotesting01/test01.py

"""
###  Creación de Funciones
4. Crear una función con el nombre mul_lambda, lambda que multiple dos enteros, el resultado deberá ser un número entero.  

Ejemplo de ejecución:

```python
mul_lambda(a,b)
donde a, y b son numeros enteros
```


5. Crear una función explicita con el nombre de suma_int, que realice la suma de dos números enteros

Ejemplo de ejecución:

```python
sum_int(a,b)
donde a, y b son numeros enteros
```

"""

mul_lambda = lambda a,b: a*b #Ejemplo de función tipo lambda.

def sum_int(a,b):
  c = a+b
  return c

# Commented out IPython magic to ensure Python compatibility.
# %run -i autogrades/example/libs/Lab_autotesting01/test02.py

"""
###  Números complejos

6. Defina un número complejo w.
7. Retorne la parte imaginaria de w, almacenela en una variable w_img
8. Retorne la parte real de w, almacenela en una variable w_real.
9. Retorne el complejo conjugado de w, almacenla en una varible w_con.
"""

w = 1+1j #Cómo crear una variable tipo complejo
w_img = w.imag #Cómo encontrar la parte imaginario de un número complejo.
w_real = w.real #Cómo encontrar la parte real de un complejo
w_con = w.conjugate() #Conjugada de un complejo.

# Commented out IPython magic to ensure Python compatibility.
# %run -i autogrades/example/libs/Lab_autotesting01/test03.py

"""###  Listas 

10.0  Construir una lista L con las variables usadas hasta acá y los resultados de las funciones.

L=[x,y,z,mul_lambda, mul_int,w, w_img, w_real, w_con ]

11.0 Invierta la lista y almacene en una variable L_reverse 

12.0 Almacene los elementos impares de la lista, L_imp

13.0 Almacene los elementos pares de la lista, L_par

14.0 Modifique el elemento 5 de la lista L con la palabra "hello world"

"""

L = [x,y,z,mul_lambda,sum_int,w,w_img,w_real,w_con]
##Slices: primer indice dónde empieza, segundo índice dónde acaba y tercer índice los steps.
L_reverse = L[::-1] #Invertir los elementos de la lista de atrás hacia adelante
L_imp = L[1::2] #Empieza a iterar en la posición 1 y hace de a dos steps.
L_par = L[0::2] #Empieza a iterar desde la posición cero.

# Commented out IPython magic to ensure Python compatibility.
# %run -i autogrades/example/libs/Lab_autotesting01/test04.py

"""###  Tuplas

15.0 Definir una tupla con 5 elementos almacenda en la variable Tup, los primeros 3 tipo string y los ultimos dos, tipo float. 
"""

Tup = ('','','',0.0,0.0)

# Commented out IPython magic to ensure Python compatibility.
# %run -i autogrades/example/libs/Lab_autotesting01/test05.py

"""###  Set 
16.0 Defina una variable tipo set llamada  D con los primeros 10 numeros de Bernulli, consultalos en la red. Notese que pasa en este variables cuando alguno de los elementos se repite

17.0 Defina una variable tipo set llamada E con los números naturales del 1 al 20.

18.0 Calcule la unión  y almacenela en una variable U.

19.0 Calcule la intersección y almacenela en una variable I

"""

D = set([1,-1/2,1/6,0,-1/30,0,1/42,0,-1/30,0,5/66])
E =  set(range(1,20))
U = D | E
I = D & E

# Commented out IPython magic to ensure Python compatibility.
# %run -i autogrades/example/libs/Lab_autotesting01/test06.py

"""













###  Diccionarios 
20.0 Construi un diccionario con 5 elementos cuya clave es el nombre del autor y valor el nombre del libro. Almacenarlo en una variable dicc.



"""

dicc = {"Garcia": "Cien años de soledad", 'Semanzky':'Física Universitaria', 'Galeano':'El libro de los abrazos','Paulo':'Alquimista','Davinci':'El codigo'}

# Commented out IPython magic to ensure Python compatibility.
# %run -i autogrades/example/libs/Lab_autotesting01/test07.py

"""
####  Ciclos y condicionales 

21.0  Cálculo de $\pi$. Empleando la siguiente seria :

\begin{equation}
\frac{\pi}{4} = 1 -\frac{1}{3}+-\frac{1}{5}-\frac{1}{7}+\frac{1}{9}-...
\end{equation}

Construya una función llamada pi_number en el que entrado el valor de k,(número de términos de la serie ) calcule el valor de pi. Si k es negativo deberá retornar un error como una variable tipo string.

Ejemplo de ecución:
```python
pi_number(10)
```"""

def pi_number(k):
  if k < 0:
    return ("Las series solo admiten números enteros positivos.")
  elif k == 0:
    pi = 0
    return pi
  elif k == 1:
    pi = 4
    return pi 
  else:
    a = 1
    n = 1
    terminos_serie = []
    for i in range(1,k+1):
      n = n+1
      termino = (-1)**n*(1/a) #Se cálcula cada término de la serie y se agrega a una lista.
      terminos_serie.append(termino) #Se agrega cada término a una lista.
      a = a+2  
    pi = 4*sum(terminos_serie) #Hacemos la sumatoria de los términos de la serie y se multiplica por 4 para obtener pi.
    return pi

print(pi_number(10000))

# Commented out IPython magic to ensure Python compatibility.
# %run -i autogrades/example/libs/Lab_autotesting01/test08.py