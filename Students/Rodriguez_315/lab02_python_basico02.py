# -*- coding: utf-8 -*-
"""Lab02_python_basico02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XCseQ-w8S1hc-YtuUWiu_VyWx01Dkwun

# Laboratorio 02
### Métodos computacionales para físicos  y astrónomos
### Universidad de Antioquia
### Prof: Hernan D. Salinas Jiménez
"""

!git clone https://github.com/hernansalinas/autogrades.git

# Commented out IPython magic to ensure Python compatibility.
# Ejecutar esta celda antes de cada laboratorio
path="autogrades/Laboratorios_Taller/libs"
pathL="autogrades/Laboratorios_Taller/libs/Lab_02"
# %run -i {path}/libUnitTest.py

"""## Problemas

### Factorial
1. Elaborar un algoritmo e implementar en python, el factorial de un número entero `n` ingresado por el usuario.

1. Si el número es un entero deberá retornal el factorial del número.
2. Si el número es negativo deberá aparecer un mensaje tipo string con el mensaje  "el número no puede ser negativo"

3. Si el número es pertenece a los reales(float) el mensaje será, el número no puede ser real.


     ### Ejemplo de Ejecución
    ```python

    >>> factorial(3)
        6

    >>> factorial(1987123)
        =???
```

"""

def factorial(n):
  factorial = n
  if n == 0:
    return 1
  if n < 0:
    return "el número no puede ser negativo"
  if isinstance(n,float):
    return "el número no puede ser real"
  #Otra forma:
  #for k in range(1,-1)?
  while n > 1:
    n = n-1
    factorial = factorial*n
  return factorial  
factorial(6)
factorial(-1)
factorial(1.9)

# Commented out IPython magic to ensure Python compatibility.
# %run -i {pathL}/test01.py

"""### Teoria de números

Los enunciados 2 y 3 se refieren a la siguiente información:

Diseñar un programa en el que entrado  un numero `a`  retorne una variable booleana True or false si cumple que es:

2. [Números defectivo](https://es.wikipedia.org/wiki/Número_defectivo) : la suma de los divisores propios es menor que el número. 

  La rutina se deberá llamar números_defectivos



3. [Números abundantes](https://es.wikipedia.org/wiki/Número_abundante): la suma de los divisores es mayor que el número.

  La rutina se deberá llamar números_abundantes



4. [Números semiperfectos](https://es.wikipedia.org/wiki/N%C3%BAmero_semiperfecto) la suma de todos o algunos de los divisores propios es igual al número.

  La rutina se debera llamar numeros_semiperfectos

5. [Números perfectos](https://es.wikipedia.org/wiki/N%C3%BAmero_perfecto) la suma de todos sus divisores propios, excepto el mismo numero, es igual al número.

   La rutina se deberá llamar numeros_perfectos


6. [Números primos](https://es.wikipedia.org/wiki/N%C3%BAmero_primo) el número es divisible unicamente por sí mismo y por 1.
   La rutina se deberá llamar numeros_primos


Problema no obligatorio: 

P1. Retornar los 30 primeros números de cada clase
"""

#EJERCICIO 2: NÚMEROS DEFECTIVOS
def numeros_defectivos(a):
  numeros = [i for i in range(1,a)]
  divisores = []
  for i in numeros:
    if (a%i == 0):
      divisores.append(i)
  suma = sum(divisores)
  if (suma<a):
    return True
  else: return False
  
numeros_defectivos(8)

# Commented out IPython magic to ensure Python compatibility.
# %run -i {pathL}/test02.py

#EJERCICIO 3: NÚMEROS ABUNDANTES
def numeros_abundantes(a):
  numeros = [i for i in range(1,a)]
  divisores = []
  for i in numeros:
    if (a%i == 0):
      divisores.append(i)
  suma = sum(divisores)
  if (suma>a):
    return True
  else: return False
numeros_abundantes(12)

# Commented out IPython magic to ensure Python compatibility.
# %run -i {pathL}/test03.py

#Este bloque de código fue hecho con la ayuda de Chatgpt.
import itertools
def combinatoria_suma(lista):
    combinaciones = []
    for i in range(1, len(lista)+1):
        combinaciones_i = list(itertools.combinations(lista, i))#Crea la combinatoria de tamaño i y devuelve un objeto iterable
        combinaciones_i_suma = [sum(x) for x in combinaciones_i] #Sumamos cada elemento de la lista combinaciones_i.
        combinaciones.extend(combinaciones_i_suma)
    return combinaciones

#EJERCICIO 4: NÚMEROS SEMIPERFECTOS
def numeros_semiperfectos(a):
  numeros = [i for i in range(1,a)]
  divisores = []
  for i in numeros:
    if (a%i == 0):
      divisores.append(i)
  combinatoria_divisores = combinatoria_suma(divisores)
  for i in combinatoria_divisores:
    if i == a:
      return True
  return False
numeros_semiperfectos(20)

# Commented out IPython magic to ensure Python compatibility.
# %run -i {pathL}/test04.py

#EJERCICIO 5: NÚMEROS PERFECTOS
def numeros_perfectos(a):
  numeros = [i for i in range(1,a)]
  divisores = []
  for i in numeros:
    if (a%i == 0):
      divisores.append(i)
  suma = sum(divisores)
  if (suma==a):
    return True
  else: return False
numeros_perfectos(496)

# Commented out IPython magic to ensure Python compatibility.
# %run -i {pathL}/test05.py

#EJERCICIO 6: NÚMEROS PRIMOS
import math
def numeros_primos(a):
  if(a==1):
    return False
  if(a==2):
    return True
  b = int(math.sqrt(a)) #Si hasta la raíz del número no se hallan divisores, más adelante no se encontrarán.
  for i in range(2,b+1):
    if(a%i==0):
      return False
  return True
numeros_primos(661)

# Commented out IPython magic to ensure Python compatibility.
# %run -i {pathL}/test06.py

"""
7. Diseñar un programa en el que entrado dos números `a`  y `b` retorne una variable booleana **True** o **false**.

  [Números amigos](https://es.wikipedia.org/wiki/N%C3%BAmeros_amigos) `a` y `b` tales que a es la suma de los divisores propios de `b` y viceversa.
    La rutina se debera llamar numeros_amigos
 



P2. Retornar los 10 primeros pares de numeros perfectos, semiperfectos, amigos 

"""

def numeros_amigos(a,b):
  numeros1 = [i for i in range(1,a)]
  divisores1 = []
  numeros2 = [i for i in range(1,b)]
  divisores2 = []
  for i in numeros1:
    if(a%i==0):
      divisores1.append(i)
  for j in numeros2:
    if(b%j==0):
      divisores2.append(j)
  suma1 = sum(divisores1)
  suma2 = sum(divisores2)
  if (suma1==b and suma2==a):
    return True
  else: return False

numeros_amigos(220,284)

# Commented out IPython magic to ensure Python compatibility.
# %run -i {pathL}/test07.py

"""3. Determine si un número `n` entero ingresado por el usuario es un [palíndromo](https://en.wikipedia.org/wiki/Palindromic_number), (Retorne `True` en caso afirmativo y `False` en caso contrario) 

```python


    >>> palindromo(3333333)
        True

    >>> palindromo(2323)
        True
        
    >>> palindromo(1111349111111)
        False
```



"""

def palindromo(n):
  num = str(n)
  contrario = num[::-1]
  if(num==contrario):
    return True
  return False

palindromo(1111349111111)

"""8 Construir un programa en el que  entrado un arreglo de números se  ordenen de forma ascendente, Ver algoritmo
[Quicksort](https://es.wikipedia.org/wiki/Quicksort). 


```python


<<< v = [22, 32, 42, 12, 22, 31, 41, 11, 12, 232, 24, 12, 22]
<<< def quicksort(v):

<<<     return v
<<< w = print(quicksort(v))
<<< [11, 12, 12, 12, 22, 22, 22, 24, 31, 32, 41, 42, 232]

```

Sólo para comprobar tu código,  puedes hacer uso del comando sort de python. 
```python
<<< b = [22, 32, 42, 12, 22, 31, 41, 11, 12, 232, 24, 12, 22]

<<< print(b.sort())

<<< [11, 12, 12, 12, 22, 22, 22, 24, 31, 32, 41, 42, 232]
```
"""

#Código realizado con ayuda de chatgpt.
def quicksort(lista):
  if  len(lista)<=1:
    return lista
  else:
    pivote = lista[0]
    menores = [i for i in lista[1:] if i <=pivote]
    mayores = [i for i in lista[1:] if i > pivote]
    return quicksort(menores) + [pivote] + quicksort(mayores)

data = [22, 32, 42, 12, 22, 31, 41, 11, 12, 232, 24, 12, 22]
quicksort(data)